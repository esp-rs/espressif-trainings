use bsc::wifi::wifi;
use core::str;
use embedded_svc::http::{client::Client, Status};
use embedded_svc::io::{Read, Write};
use esp32_c3_dkc02_bsc as bsc;
use esp_idf_hal::prelude::Peripherals;
use esp_idf_svc::eventloop::EspSystemEventLoop;
use esp_idf_svc::http::client::{Configuration, EspHttpConnection};
use esp_idf_sys as _;

#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

fn main() -> anyhow::Result<()> {
    esp_idf_sys::link_patches();
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    // Connect to the Wi-Fi network
    let _wifi = wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop.clone(),
    )?;

    get("http://neverssl.com/")?;

    Ok(())
}

fn get(url: impl AsRef<str>) -> anyhow::Result<()> {
    // 1. Create a new EspHttpClient. (Check documentation)
    let connection = EspHttpConnection::new(&Configuration {
        ..Default::default()
    })?;
    let mut client = Client::wrap(connection);

    // // 2. Open a GET request to `url`
    let request = client.get(url.as_ref())?;

    // // 3. Requests *may* send data to the server. Turn the request into a writer, specifying 0 bytes as write length
    // // (since we don't send anything - but have to do the writer step anyway)
    // // https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/protocols/esp_http_client.html
    // // If this were a POST request, you'd set a write length > 0 and then writer.do_write(&some_buf);
    // let writer = request.into_writer(0)?;
    let headers = [("Content-Type", "application/json")];
    let mut request = client.post(url.as_ref(), &headers)?;
    request.write_all("asdad".as_bytes())?;
    request.flush()?;
    // // 4. Submit our write request and check the status code of the response.
    // // Successful http status codes are in the 200..=299 range.
    let response = request.submit()?;
    let status = response.status();

    println!("response code: {}\n", status);

    match status {
        200..=299 => {
            // 5. if the status is OK, read response data chunk by chunk into a buffer and print it until done
            let mut buf = [0_u8; 256];
            let mut reader = response;
            loop {
                if let Ok(size) = Read::read(&mut reader, &mut buf) {
                    if size == 0 {
                        break;
                    }
                    // 6. try converting the bytes into a Rust (UTF-8) string and print it
                    let response_text = str::from_utf8(&buf[..size])?;
                    println!("{}", response_text);
                }
            }
        }
        _ => anyhow::bail!("unexpected response code: {}", status),
    }

    Ok(())
}
